#!/usr/bin/env python

"""linkpred main script"""

import os
import sys

# LIBDIR trick start (marker for removal on platforms that don't need it)
# This trick is inspired by Nikola
# <https://github.com/getnikola/nikola/blob/master/scripts/nikola>.
# It allows running from a direct checkout as well as a 'properly' installed
# package.
libdir = '@LIBDIR@'

# Two cases:
if libdir != '@' 'LIBDIR' '@':
    # Changed by our distutils hook, then use the given path.

    if not os.path.isabs(libdir):
        libdir = os.path.join(os.path.dirname(
            os.path.realpath(__file__)), libdir)
        libdir = os.path.abspath(libdir)
else:
    # Unchanged, running from checkout,
    # use the parent directory, the linkpred package ought be there.
    libdir = os.path.join(os.path.dirname(__file__), "..")

sys.path.insert(0, libdir)

if "PYTHONPATH" not in os.environ:
    os.environ["PYTHONPATH"] = libdir
else:
    os.environ["PYTHONPATH"] = os.environ["PYTHONPATH"] + ":" + libdir

# LIBDIR trick end (marker for removal on platforms that don't need it)

from linkpred.cli import get_profile
from linkpred.core import read_network, filter_low_degree_nodes, \
    predict_all, evaluate
from linkpred.evaluation import DataSet


def main():
    profile = get_profile()
    training = profile.read_network('training')
    test = profile.read_network('test')
    if test:
        filter_low_degree_nodes([training, test], minimum=min_degree)

    predictions = profile.predict_all(only_new)

    only_new = profile.get("only_new", False)
    filetype = profile.get('filetype', 'pdf')
    steps = profile.get('steps', 1)
    interpolate = profile.get('interpolation', False)
    training_fname = profile['training']
    test_fname = profile['test']
    label = "TODO"  # TODO
    min_degree = profile.get("min_degree", 1)

    training = read_network(training_fname)
    if test_fname:
        test = read_network(test_fname)
        filter_low_degree_nodes([training, test], minimum=min_degree)

    predictions = predict_all(training, profile, only_new)
    exclude = set(training.edges_iter()) if only_new else set()

    if test_fname:
        # XXX But we may want to use the listener for all predictions, even if
        # there is no test network!
        dataset = DataSet(label, predictions, test, exclude=exclude, steps=steps)
        evaluate(dataset, label, filetype, interpolate, steps=steps)

if __name__ == "__main__":
    main()
